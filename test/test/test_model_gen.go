// Code generated by goctl. DO NOT EDIT.

package test

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	vTestFieldNames          = builder.RawFieldNames(&VersionTestModel{})
	vTestRows                = strings.Join(vTestFieldNames, ",")
	vTestRowsExpectAutoSet   = strings.Join(stringx.Remove(vTestFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	vTestRowsWithPlaceHolder = strings.Join(stringx.Remove(vTestFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	vTestModel interface {
		Insert(ctx context.Context, data *VersionTestModel) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*VersionTestModel, error)
		Update(ctx context.Context, data *VersionTestModel) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVersionTestModelModel struct {
		conn  sqlx.SqlConn
		table string
	}

	VersionTestModel struct {
		Id        int64     `db:"id"`         // 主键ID
		Name      string    `db:"name"`       // 名称
		Age       int64     `db:"age"`        // 年龄
		Class     int64     `db:"class"`      // 班级
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 修改时间
	}
)

func newVersionTestModelModel(conn sqlx.SqlConn) *defaultVersionTestModelModel {
	return &defaultVersionTestModelModel{
		conn:  conn,
		table: "`v_test`",
	}
}

func (m *defaultVersionTestModelModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVersionTestModelModel) FindOne(ctx context.Context, id int64) (*VersionTestModel, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", vTestRows, m.table)
	var resp VersionTestModel
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVersionTestModelModel) Insert(ctx context.Context, data *VersionTestModel) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, vTestRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Age, data.Class)
	return ret, err
}

func (m *defaultVersionTestModelModel) Update(ctx context.Context, data *VersionTestModel) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, vTestRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Age, data.Class, data.Id)
	return err
}

func (m *defaultVersionTestModelModel) tableName() string {
	return m.table
}
